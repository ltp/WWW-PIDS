package tramTRACKER_x0020_PIDS_x0020_Web_x0020_Service;
# Generated by SOAP::Lite (v1.09) for Perl -- soaplite.com
# Copyright (C) 2000-2006 Paul Kulchenko, Byrne Reese
# -- generated at [Mon May  4 13:02:09 2015]
# -- generated from http://ws.tramtracker.com.au/pidsservice/pids.asmx?WSDL
my %methods = (
'GetNextPredictedArrivalTimeAtStopsForTramNo' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetNextPredictedArrivalTimeAtStopsForTramNo',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'tramNo', type => 's:short', attr => {}),
    ], # end parameters
  }, # end GetNextPredictedArrivalTimeAtStopsForTramNo
'GetPlatformStopsByRouteAndDirection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetPlatformStopsByRouteAndDirection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'isUpDirection', type => 's:boolean', attr => {}),
    ], # end parameters
  }, # end GetPlatformStopsByRouteAndDirection
'TestGetMainRoutesForStop' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetMainRoutesForStop',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
    ], # end parameters
  }, # end TestGetMainRoutesForStop
'TestGetStopsAndRoutesUpdatesSince' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetStopsAndRoutesUpdatesSince',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'dateSince', type => 's:dateTime', attr => {}),
    ], # end parameters
  }, # end TestGetStopsAndRoutesUpdatesSince
'GetMainRoutes' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetMainRoutes',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
    ], # end parameters
  }, # end GetMainRoutes
'TestGetRouteStopsByRoute' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetRouteStopsByRoute',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
    ], # end parameters
  }, # end TestGetRouteStopsByRoute
'TestGetPlatformStopsByRouteAndDirection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetPlatformStopsByRouteAndDirection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'isUpDirection', type => 's:boolean', attr => {}),
    ], # end parameters
  }, # end TestGetPlatformStopsByRouteAndDirection
'GetStopsAndRoutesUpdatesSince' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetStopsAndRoutesUpdatesSince',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'dateSince', type => 's:dateTime', attr => {}),
    ], # end parameters
  }, # end GetStopsAndRoutesUpdatesSince
'TestGetRouteSummaries' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetRouteSummaries',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
    ], # end parameters
  }, # end TestGetRouteSummaries
'GetListOfStopsByRouteNoAndDirection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetListOfStopsByRouteNoAndDirection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'isUpDirection', type => 's:boolean', attr => {}),
    ], # end parameters
  }, # end GetListOfStopsByRouteNoAndDirection
'GetRouteStopsByRoute' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetRouteStopsByRoute',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
    ], # end parameters
  }, # end GetRouteStopsByRoute
'GetRouteSummaries' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetRouteSummaries',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
    ], # end parameters
  }, # end GetRouteSummaries
'TestGetDestinationsForAllRoutes' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetDestinationsForAllRoutes',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
    ], # end parameters
  }, # end TestGetDestinationsForAllRoutes
'GetDestinationsForRoute' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetDestinationsForRoute',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
    ], # end parameters
  }, # end GetDestinationsForRoute
'GetNextPredictedRoutesCollection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetNextPredictedRoutesCollection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'lowFloor', type => 's:boolean', attr => {}),
    ], # end parameters
  }, # end GetNextPredictedRoutesCollection
'TestGetSchedulesCollection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetSchedulesCollection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'dateTime', type => 's:dateTime', attr => {}),
      SOAP::Data->new(name => 'lowFloor', type => 's:boolean', attr => {}),
    ], # end parameters
  }, # end TestGetSchedulesCollection
'GetSchedulesCollection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetSchedulesCollection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'lowFloor', type => 's:boolean', attr => {}),
      SOAP::Data->new(name => 'clientRequestDateTime', type => 's:dateTime', attr => {}),
    ], # end parameters
  }, # end GetSchedulesCollection
'GetStopInformation' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetStopInformation',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
    ], # end parameters
  }, # end GetStopInformation
'TestGetListOfStopsByRouteNoAndDirection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetListOfStopsByRouteNoAndDirection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'isUpDirection', type => 's:boolean', attr => {}),
    ], # end parameters
  }, # end TestGetListOfStopsByRouteNoAndDirection
'TestGetNextPredictedArrivalTimeAtStopsForTramNo' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetNextPredictedArrivalTimeAtStopsForTramNo',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'tramNo', type => 's:short', attr => {}),
    ], # end parameters
  }, # end TestGetNextPredictedArrivalTimeAtStopsForTramNo
'TestGetStopInformation' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetStopInformation',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
    ], # end parameters
  }, # end TestGetStopInformation
'GetNewClientGuid' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetNewClientGuid',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
    ], # end parameters
  }, # end GetNewClientGuid
'TestGetNextPredictedRoutesCollection' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetNextPredictedRoutesCollection',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
      SOAP::Data->new(name => 'lowFloor', type => 's:boolean', attr => {}),
    ], # end parameters
  }, # end TestGetNextPredictedRoutesCollection
'TestGetDestinationsForRoute' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetDestinationsForRoute',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'routeNo', type => 's:string', attr => {}),
    ], # end parameters
  }, # end TestGetDestinationsForRoute
'TestGetSchedulesForTrip' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetSchedulesForTrip',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'tripID', type => 's:int', attr => {}),
      SOAP::Data->new(name => 'scheduledDateTime', type => 's:dateTime', attr => {}),
    ], # end parameters
  }, # end TestGetSchedulesForTrip
'GetSchedulesForTrip' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetSchedulesForTrip',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'tripID', type => 's:int', attr => {}),
      SOAP::Data->new(name => 'scheduledDateTime', type => 's:dateTime', attr => {}),
    ], # end parameters
  }, # end GetSchedulesForTrip
'TestGetMainRoutes' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/TestGetMainRoutes',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
    ], # end parameters
  }, # end TestGetMainRoutes
'GetMainRoutesForStop' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetMainRoutesForStop',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
      SOAP::Data->new(name => 'stopNo', type => 's:short', attr => {}),
    ], # end parameters
  }, # end GetMainRoutesForStop
'GetDestinationsForAllRoutes' => {
    endpoint => 'http://ws.tramtracker.com.au/pidsservice/pids.asmx',
    soapaction => 'http://www.yarratrams.com.au/pidsservice/GetDestinationsForAllRoutes',
    namespace => 'http://www.yarratrams.com.au/pidsservice/',
    parameters => [
    ], # end parameters
  }, # end GetDestinationsForAllRoutes
); # end my %methods

use SOAP::Lite;
use Exporter;
use Carp ();

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

sub _call {
    my ($self, $method) = (shift, shift);
    my $name = UNIVERSAL::isa($method => 'SOAP::Data') ? $method->name : $method;
    my %method = %{$methods{$name}};
    $self->proxy($method{endpoint} || Carp::croak "No server address (proxy) specified")
        unless $self->proxy;
    my @templates = @{$method{parameters}};
    my @parameters = ();
    foreach my $param (@_) {
        if (@templates) {
            my $template = shift @templates;
            my ($prefix,$typename) = SOAP::Utils::splitqname($template->type);
            my $method = 'as_'.$typename;
            # TODO - if can('as_'.$typename) {...}
            my $result = $self->serializer->$method($param, $template->name, $template->type, $template->attr);
            push(@parameters, $template->value($result->[2]));
        }
        else {
            push(@parameters, $param);
        }
    }
    $self->endpoint($method{endpoint})
       ->ns($method{namespace})
       ->on_action(sub{qq!"$method{soapaction}"!});
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/soap12/","soap12");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/","wsdl");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/mime/","mime");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/http/","http");
  $self->serializer->register_ns("http://www.yarratrams.com.au/pidsservice/","tns");
  $self->serializer->register_ns("http://www.w3.org/2001/XMLSchema","s");
  $self->serializer->register_ns("http://microsoft.com/wsdl/types/","s1");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/soap/envelope/","soap");
  $self->serializer->register_ns("http://microsoft.com/wsdl/mime/textMatching/","tm");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/soap/encoding/","soapenc");
    my $som = $self->SUPER::call($method => @parameters);
    if ($self->want_som) {
        return $som;
    }
    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result : $som;
}

sub BEGIN {
    no strict 'refs';
    for my $method (qw(want_som)) {
        my $field = '_' . $method;
        *$method = sub {
            my $self = shift->new;
            @_ ? ($self->{$field} = shift, return $self) : return $self->{$field};
        }
    }
}
no strict 'refs';
for my $method (@EXPORT_OK) {
    my %method = %{$methods{$method}};
    *$method = sub {
        my $self = UNIVERSAL::isa($_[0] => __PACKAGE__)
            ? ref $_[0]
                ? shift # OBJECT
                # CLASS, either get self or create new and assign to self
                : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
            # function call, either get self or create new and assign to self
            : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
        $self->_call($method, @_);
    }
}

sub AUTOLOAD {
    my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
    return if $method eq 'DESTROY' || $method eq 'want_som';
    die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}


1;
